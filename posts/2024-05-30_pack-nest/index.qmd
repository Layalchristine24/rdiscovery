---
title: What is the difference between (un)packing and (un)nesting a tibble?
author:
  - name:
      given: Layal Christine
      family: Lettry
      orcid: 0009-0008-6396-0523
    affiliations:
      - id: cynkra
      - name: cynkra GmbH
        city: Zurich
        state: CH
      - id: unifr
      - name: University of Fribourg, Dept. of Informatics, ASAM Group
        city: Fribourg
        state: CH
date: 2024-05-30
categories: [nest, unnest, pack, unpack, tidyr, json, constructive]
image: image.jpg
citation: 
  url: https://rdiscovery.netlify.app/posts/2024-05-30_pack-nest/
format:
  html:
    toc: true
    toc-depth: 6
    toc-title: Contents
    toc-location: right
    number-sections: false
editor_options: 
  chunk_output_type: console
---

*Does a nested tibble have the same structure as a packed tibble?*

# Initial object

Let's assume that we have the object `my_tib` which is a nested tibble containing a list, namely `my_values`, with another tibble where the variables are `my_ints` and `my_chars`.

```{r}
my_tib <-
  tibble::tibble(
    my_values = list(tibble::tibble(
      my_ints = 1L:5L,
      my_chars = LETTERS[my_ints]
    ))
  )
constructive::construct(my_tib)
```

We could also use `tidyr::nest()` to create `my_tib` (please refer to [this article](https://tidyr.tidyverse.org/articles/nest.html) for more info).

```{r}
my_nested_tib <-
  tibble::tribble(
    ~my_ints, ~my_chars,
    1L, "A",
    2L, "B",
    3L, "C",
    4L, "D",
    5L, "E"
  ) |>
  tidyr::nest(my_values = c(my_ints, my_chars))

constructive::construct(my_nested_tib)
```

As you can see, there is no difference between `my_tib` and `my_nested_tib`.

```{r}
waldo::compare(my_tib, my_nested_tib)
```

# What is the difference between a nested and a packed tibble?

To obtain a packed tibble, we should pack the variables `my_ints` and `my_chars` together so that we have a tibble in another tibble instead of a list with an element that is a tibble.

```{r}
my_packed_tib <-
  tibble::tribble(
    ~my_ints, ~my_chars,
    1L, "A",
    2L, "B",
    3L, "C",
    4L, "D",
    5L, "E"
  ) |>
  tidyr::pack(my_values = c(my_ints, my_chars))
constructive::construct(my_packed_tib)
```

We can assess the difference between `my_nested_tib` and `my_packed_tib` with `waldo::compare()`.

```{r}
waldo::compare(my_nested_tib, my_packed_tib)
```

This tells us that `my_nested_tib` has only one row and contains the variable `my_values` that is a list, whereas `my_packed_tib` has 5 rows and is constituted by the variable `my_values` that has, in this case, the class `data.frame`.

```{r}
class(my_packed_tib$my_values)
```

For the record, a data frame is a special list where every element has the same length.

```{r}
typeof(my_packed_tib$my_values)
```

# How to unnest or unpack a tibble?

To get a tibble without any variable that is a list or a tibble, we should unnest and, respectively, unpack our nested/packed tibble.

```{r}
my_unnested_tib <-
  my_nested_tib |>
  tidyr::unnest(my_values)

constructive::construct(my_unnested_tib)
```

Now, we have a simple tibble with two variables instead of one single variable that is a list.

```{r}
my_unpacked_tib <-
  my_packed_tib |>
  tidyr::unpack(my_values)

constructive::construct(my_unpacked_tib)
```

Here again, we obtain a simple tibble with two variables instead of one single variable that has the class `data.frame`.

# What do the packed tibble and nested tibble look like in a JSON format?

The main difference is that the instances of the variable `my_values` of the nested tibble will be written between extra square brackets to represent the `list` class of `my_values`. On the contrary, each row of the variable `my_values` of the packed tibble will be displayed separately between curly brackets given that `my_values` has the class `data.frame` in the packed case. 

```{r}
jsonlite::toJSON(my_nested_tib)

jsonlite::toJSON(my_packed_tib)
```

