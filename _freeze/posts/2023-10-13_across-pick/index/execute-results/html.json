{
  "hash": "6c6273e3834462f0b4bd1183bfc47fe9",
  "result": {
    "markdown": "---\ntitle: Perform transformations on several variables with `dplyr::across()` and `dplyr::pick()`\nauthor: \n  - name:\n      given: Layal Christine\n      family: Lettry\n      orcid: 0009-0008-6396-0523\ndate: 2023-10-13\ncategories: [dplyr, across, pick]\nimage: image.jpg\ncitation: \n  url: https://rdiscovery.netlify.app/posts/2023-10-13_across-pick/\nformat:\n  html:\n    toc: true\n    toc-title: Contents\n    toc-location: right\n    number-sections: false\n---\n\n\n*Transforming many variables quickly and easily with just one line of code*\n\n# Convert character variables into numeric\n\nSuppose you have a data frame with several character variables which you want to transform into numeric ones. You an use the function `across()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nchr_data <- tibble::tribble(\n  ~year, ~country,       ~sex,    ~age, ~is_married, ~has_child,\n  \"1990\", \"Italy\",       \"Man\",   \"28\", \"No\",        \"Yes\",\n  \"1990\", \"France\",      \"Woman\", \"68\", \"Yes\",       \"No\",\n  \"1990\", \"France\",      \"Woman\", \"22\", \"No\",        \"No\",\n  \"1990\", \"Italy\",       \"Man\",   \"56\", \"Yes\",       \"Yes\",\n  \"2000\", \"Switzerland\", \"Woman\", \"42\", \"Yes\",       \"Yes\",\n  \"2000\", \"France\",      \"Woman\", \"13\", \"No\",        \"No\",\n  \"2000\", \"Italy\",       \"Man\",   \"43\", \"Yes\",       \"No\",\n  \"1990\", \"Switzerland\", \"Woman\", \"23\", \"No\",        \"Yes\",\n  \"1990\", \"Italy\",       \"Man\",   \"36\", \"Yes\",       \"Yes\",\n  \"2000\", \"Switzerland\", \"Woman\", \"32\", \"Yes\",       \"No\",\n  \"1990\", \"Switzerland\", \"Man\",   \"23\", \"No\",        \"No\",\n  \"2000\", \"France\",      \"Man\",   \"63\", \"Yes\",       \"Yes\"\n)\n\nglimpse(chr_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 12\nColumns: 6\n$ year       <chr> \"1990\", \"1990\", \"1990\", \"1990\", \"2000\", \"2000\", \"2000\", \"19…\n$ country    <chr> \"Italy\", \"France\", \"France\", \"Italy\", \"Switzerland\", \"Franc…\n$ sex        <chr> \"Man\", \"Woman\", \"Woman\", \"Man\", \"Woman\", \"Woman\", \"Man\", \"W…\n$ age        <chr> \"28\", \"68\", \"22\", \"56\", \"42\", \"13\", \"43\", \"23\", \"36\", \"32\",…\n$ is_married <chr> \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", …\n$ has_child  <chr> \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", …\n```\n:::\n\n```{.r .cell-code}\n# Convert year and age into \nnum_data <- \n  chr_data |> \n  mutate(across(c(year, age), as.numeric))\n\nglimpse(num_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 12\nColumns: 6\n$ year       <dbl> 1990, 1990, 1990, 1990, 2000, 2000, 2000, 1990, 1990, 2000,…\n$ country    <chr> \"Italy\", \"France\", \"France\", \"Italy\", \"Switzerland\", \"Franc…\n$ sex        <chr> \"Man\", \"Woman\", \"Woman\", \"Man\", \"Woman\", \"Woman\", \"Man\", \"W…\n$ age        <dbl> 28, 68, 22, 56, 42, 13, 43, 23, 36, 32, 23, 63\n$ is_married <chr> \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", …\n$ has_child  <chr> \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", …\n```\n:::\n:::\n\n\n# Convert character variables into logical\n\nLet's convert the `sex`, `is_married` and `has_child` character variables into logical ones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- num_data |> \n  mutate(across(c(is_married, has_child), \\(x) if_else(x == \"Yes\", TRUE, FALSE)),\n         is_woman = if_else(sex == \"Woman\", TRUE, FALSE)) |> \n  select(-sex) |> \n  arrange(year, country)\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 6\n    year country       age is_married has_child is_woman\n   <dbl> <chr>       <dbl> <lgl>      <lgl>     <lgl>   \n 1  1990 France         68 TRUE       FALSE     TRUE    \n 2  1990 France         22 FALSE      FALSE     TRUE    \n 3  1990 Italy          28 FALSE      TRUE      FALSE   \n 4  1990 Italy          56 TRUE       TRUE      FALSE   \n 5  1990 Italy          36 TRUE       TRUE      FALSE   \n 6  1990 Switzerland    23 FALSE      TRUE      TRUE    \n 7  1990 Switzerland    23 FALSE      FALSE     FALSE   \n 8  2000 France         13 FALSE      FALSE     TRUE    \n 9  2000 France         63 TRUE       TRUE      FALSE   \n10  2000 Italy          43 TRUE       FALSE     FALSE   \n11  2000 Switzerland    42 TRUE       TRUE      TRUE    \n12  2000 Switzerland    32 TRUE       FALSE     TRUE    \n```\n:::\n:::\n\n\n# Perform summary statistics on multiple variables\n\nLet's compute the mean of several variables grouped by year and country.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_mean <- function(data, group_vars, mean_vars){\n  data |> \n    group_by(pick({{ group_vars }})) |> \n    reframe(across({{ mean_vars }}, \n                   ~ mean(., na.rm = TRUE), \n                   .names = \"mean_{.col}\")\n            )\n}\n\ndata |> \n  my_mean(group_vars = c(\"year\", \"country\"),\n          mean_vars = c(\"age\", \"is_married\", \"has_child\", \"is_woman\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n   year country     mean_age mean_is_married mean_has_child mean_is_woman\n  <dbl> <chr>          <dbl>           <dbl>          <dbl>         <dbl>\n1  1990 France            45           0.5              0             1  \n2  1990 Italy             40           0.667            1             0  \n3  1990 Switzerland       23           0                0.5           0.5\n4  2000 France            38           0.5              0.5           0.5\n5  2000 Italy             43           1                0             0  \n6  2000 Switzerland       37           1                0.5           1  \n```\n:::\n:::\n\n\n# References\n\nThese examples are inspired from [this article's section](https://dplyr.tidyverse.org/articles/programming.html#transforming-user-supplied-variables).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}