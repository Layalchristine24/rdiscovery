{
  "hash": "55a1e21272302eb6b14d605de0151451",
  "result": {
    "markdown": "---\ntitle: Boolean operators in R\nauthor:\n  - name:\n      given: Layal Christine\n      family: Lettry\n      orcid: 0009-0008-6396-0523\n    affiliations:\n      - id: cynkra\n      - name: cynkra GmbH\n        city: Zurich\n        state: CH\n      - id: unifr\n      - name: University of Fribourg, Dept. of Informatics, ASAM Group\n        city: Fribourg\n        state: CH\ndate: 2023-11-15\ncategories: [openxlsx, openxlsx2]\nimage: image.jpg\ncitation: \n  url: https://rdiscovery.netlify.app/posts/2023-11-19_boolean/\nformat:\n  html:\n    toc: true\n    toc-depth: 6\n    toc-title: Contents\n    toc-location: right\n    number-sections: false\n---\n\n\n*...*\n\n\nI would like to make clear when to use `&` and when to use `&&` in R. I will also explain the difference between `|` and `||`.\n\n# `&` and `&&`\n\nThe `&` operator is used to combine two logical vectors and returns a logical vector of the same length as the two input vectors. The `&&` operator is used to combine two logical vectors and returns a single logical value.\nLet's assume the following objects.\n\n## Theory  \n\nThe following table and its content is from the [this article](https://www.geeksforgeeks.org/difference-between-and-in-r/) book. It shows the difference between `&` and `&&`. \n\n\n::: {.cell tbl-cap='& and &&'}\n\n:::\n\n::: {.cell tbl-cap='& and &&' tbl-colwidths='[20,75,75]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Comparison criterion </th>\n   <th style=\"text-align:left;\"> &amp; </th>\n   <th style=\"text-align:left;\"> &amp;&amp; </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Title </td>\n   <td style=\"text-align:left;\"> element-wise logical AND </td>\n   <td style=\"text-align:left;\"> logical AND operator </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Definition </td>\n   <td style=\"text-align:left;\"> It is used to compare two logical vectors element by element and returns the new logical vector indicating which elements are TRUE in both vectors. </td>\n   <td style=\"text-align:left;\"> It is used to evaluate two logical expressions and return a single logical value indicating whether both expressions are TRUE or not. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Input </td>\n   <td style=\"text-align:left;\"> Two logical vectors, matrices, or arrays of the same length and dimension. </td>\n   <td style=\"text-align:left;\"> Two logical expressions or scalar values. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Output </td>\n   <td style=\"text-align:left;\"> A logical vector of the same length and dimension as the inputs. </td>\n   <td style=\"text-align:left;\"> A single logical value. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Evaluation </td>\n   <td style=\"text-align:left;\"> Element-wise on both inputs, even if they are of different lengths. </td>\n   <td style=\"text-align:left;\"> Short-circuited: Only the second expression is evaluated if the first is TRUE. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Use in if statements </td>\n   <td style=\"text-align:left;\"> Returns a warning if the length of the inputs is not a multiple of each other. </td>\n   <td style=\"text-align:left;\"> Returns an error if the length of the inputs is greater than one. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Use in loops </td>\n   <td style=\"text-align:left;\"> Returns a logical vector of the same length as the inputs. </td>\n   <td style=\"text-align:left;\"> Returns a single logical value, so not typically used in loops. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Examples\n\n::: columns\n::: {.column width=\"47.5%\"}\n### `&` Input\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, TRUE, FALSE, FALSE)\ny <- c(TRUE, FALSE, TRUE, FALSE)\nx & y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nx <- TRUE\ny <- TRUE\nx & y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"5%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"47.5%\"}\n\n### `&&` Input\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, TRUE, FALSE, FALSE)\ny <- c(TRUE, FALSE, TRUE, FALSE)\nx && y\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in x && y: 'length = 4' in coercion to 'logical(1)'\n```\n:::\n\n```{.r .cell-code}\nx <- TRUE\ny <- TRUE\nx && y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}