{
  "hash": "d375928c64d598c9950b574cbd68d9c2",
  "result": {
    "markdown": "---\ntitle: Switch from openxlsx to openxlsx2\nauthor:\n  - name:\n      given: Layal Christine\n      family: Lettry\n      orcid: 0009-0008-6396-0523\n    affiliations:\n      - id: cynkra\n      - name: cynkra GmbH\n        city: Zurich\n        state: CH\n      - id: unifr\n      - name: University of Fribourg, Dept. of Informatics, ASAM Group\n        city: Fribourg\n        state: CH\ndate: 2023-11-15\ncategories: [openxlsx, openxlsx2]\nimage: image.jpg\ncitation: \n  url: https://rdiscovery.netlify.app/posts/2023-11-11_openxlsx2/\nformat:\n  html:\n    toc: true\n    toc-depth: 6\n    toc-title: Contents\n    toc-location: right\n    number-sections: false\n---\n\n\n*What are the main differences between [openxlsx](https://github.com/awalker89/openxlsx) and [openxlsx2](https://github.com/JanMarvin/openxlsx2)?*\n\n# Introduction\n\nWithin this blog post, my aim is to elucidate the primary distinctions between [openxlsx](https://github.com/awalker89/openxlsx) and [openxlsx2](https://github.com/JanMarvin/openxlsx2). I've encountered these variances through a [Github Gist](https://gist.github.com/JanMarvin/a0d89bb8e128899477654dd2d4f4402d), the informative vignette titled [\"Update from openxlsx\"](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html), and my personal hands-on experience.\n\nThe provided tables are designed to offer a clear overview of the differences between openxlsx and openxlsx2. They serve as a concise presentation, illustrating the content of the vignette titled \"Update from openxlsx,\" which can be explored in detail [here](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html).\n\n# Chaining versus Piping\n\nIn contrast to openxlsx, openxlsx2 enables the creation of workbooks, the addition of styles, data writing, and other operations through the use of chained or piped operations.\n\nIn their recent update on openxlsx2, Jordan Mark Barbone and Jan Marvin Garbuszus shared a significant development in this [vignette section](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html?q=r6#why-openxlsx2): the transition to R6 in openxlsx2. This shift signifies a fundamental change in the relationship between `methods` and `objects` within openxlsx2, where `methods` are now associated with `objects` rather than `generics`.\n\nTherefore, functions can now be seamlessly chained. Moreover, operation pipelines can now be used in openxlsx2 as opposed to openxlsx. This change was triggered by the restructuration of the internal framework of openxlsx.\n\nFor those seeking a deeper understanding of R6, please refer to [Chapter 6 of \"Advanced R\" by Hadley Wickham](https://adv-r.hadley.nz/r6.html#r6). This chapter provides comprehensive insights into the principles and applications of R6.\n\nIn the tables below, we've highlighted the key arguments for each function. For a deeper dive into the specifics of each function's arguments, check out the examples in the following sections.\n\nKindly explore [this specific vignette section](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html#styles) for an example that contrasts openxlsx and openxlsx2. Unlike openxlsx, which lacks integration with pipes or chains, openxlsx2 offers flexibility in its application.\n\nIn the forthcoming examples, I will employ pipes and chains to illustrate diverse applications of the openxlsx2 functions. Feel free to use your preferred method!\n\n# Read an existing Excel Workbook\n\n\n::: {.cell tbl-cap='Create a workbook and write data'}\n\n:::\n\n::: {.cell tbl-cap='Read an existing Excel workbook' tbl-colwidths='[50,60,60,60]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">openxlsx2</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> Action </th>\n   <th style=\"text-align:left;\"> openxlsx </th>\n   <th style=\"text-align:left;\"> chain </th>\n   <th style=\"text-align:left;\"> pipe </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Load file </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> `wb_load()` </td>\n   <td style=\"text-align:left;\"> `wb_load()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Read file </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> `wb_to_df()` </td>\n   <td style=\"text-align:left;\"> `wb_to_df()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Read file </td>\n   <td style=\"text-align:left;\"> `read.xlsx()` </td>\n   <td style=\"text-align:left;\"> `read_xlsx()` </td>\n   <td style=\"text-align:left;\"> `read_xlsx()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Read file </td>\n   <td style=\"text-align:left;\"> `readWorkbook()` </td>\n   <td style=\"text-align:left;\"> `wb_read()` </td>\n   <td style=\"text-align:left;\"> `wb_read()` </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nPlease be aware that the recently introduced functions in openxlsx2, namely `read_xlsx()` and `wb_read()`, serve as mere wrappers for `wb_to_df()`. Their purpose is to facilitate a seamless transition between openxlsx and openxlsx2.\n\n## Example\n\nIn this example, I want to illustrate how to read an Excel file efficiently.\n\nYou can use `wb_to_df()`, `wb_read()` or `read_xlsx()` which almost have all arguments in common, since `wb_read()` and `read_xlsx()` are wrappers of `wb_to_df()`.\n\nWhen you read an Excel file, you can define the types of the columns directly. Please refer to the [Details section](https://janmarvin.github.io/openxlsx2/reference/wb_to_df.html#details) for more information. Please keep in mind that the `type` argument must be a named numeric where each variables belongs to one of these instances:\n\n-   0: character\n\n-   1: numeric\n\n-   2: date\n\n-   3: posixt (datetime)\n\n-   4: logical\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile <- system.file(\"extdata\", \"openxlsx2_example.xlsx\", package = \"openxlsx2\")\n\n# With wb_load\nmy_wb_loaded <- wb_load(file)\nmy_wb_loaded\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA Workbook object.\n \nWorksheets:\n Sheets: Sheet1, Sheet2 \n Write order: 1, 2\n```\n:::\n\n```{.r .cell-code}\nwb_open(my_wb_loaded) # take a look at the raw xlsx file\nmy_df_loaded <- wb_to_df(my_wb_loaded,\n  sheet = 1,\n  skip_empty_cols = TRUE,\n  skip_empty_rows = TRUE,\n  show_formula = TRUE,\n  na.strings = c(\"#NUM!\", \"#VALUE!\"),\n  types = c(\n    \"Var1\" = 4, \"Var2\" = 1, \"Var3\" = 1, \"Var4\" = 0, \"Var5\" = 2,\n    \"Var6\" = 0, \"Var7\" = 0, \"Var8\" = 3\n  )\n)\nmy_df_loaded\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Var1 Var2   Var3 Var4       Var5         Var6            Var7\n3   TRUE    1   1.00    a 2023-05-29 3209324 This            E3/0\n4   TRUE   NA     NA    b 2023-05-23         <NA>              C4\n5   TRUE    2   1.34    c 2023-02-01         <NA>            <NA>\n6  FALSE    2     NA <NA>       <NA>         <NA>           C6+E6\n7  FALSE    3   1.56    e       <NA>         <NA>            <NA>\n8  FALSE    1   1.70    f 2023-03-02         <NA>           C8+E8\n10 FALSE    2  23.00    h 2023-12-24         <NA>    SUM(C10,E10)\n11 FALSE    3  67.30    i 2023-12-25         <NA> PRODUCT(C11,E3)\n12    NA    1 123.00 <NA> 2023-07-31         <NA>         E12-C12\n                  Var8\n3  1899-12-31 01:27:15\n4  1899-12-31 14:02:57\n5  1899-12-31 23:01:02\n6  1899-12-31 17:24:53\n7                 <NA>\n8  1899-12-31 08:45:58\n10                <NA>\n11                <NA>\n12                <NA>\n```\n:::\n\n```{.r .cell-code}\n# With read_xlsx\nmy_xslx_read <- read_xlsx(file,\n  convert = FALSE # to keep all variables as characters\n)\nglimpse(my_xslx_read)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10\nColumns: 9\n$ Var1 <chr> \"TRUE\", \"TRUE\", \"TRUE\", \"FALSE\", \"FALSE\", \"FALSE\", NA, \"FALSE\", \"…\n$ Var2 <chr> \"1\", NA, \"2\", \"2\", \"3\", \"1\", NA, \"2\", \"3\", \"1\"\n$ NA   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ Var3 <chr> \"1\", \"#NUM!\", \"1.34\", NA, \"1.56\", \"1.7\", NA, \"23\", \"67.3\", \"123\"\n$ Var4 <chr> \"a\", \"b\", \"c\", \"#NUM!\", \"e\", \"f\", NA, \"h\", \"i\", NA\n$ Var5 <chr> \"2023-05-29\", \"2023-05-23\", \"2023-02-01\", NA, NA, \"2023-03-02\", N…\n$ Var6 <chr> \"3209324 This\", NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ Var7 <chr> \"#DIV/0!\", \"0\", \"#VALUE!\", \"2\", NA, \"2.7\", NA, \"25\", \"3\", \"122\"\n$ Var8 <chr> \"6.0590277777777778E-2\", \"0.58538194444444447\", \"0.95905092592592…\n```\n:::\n\n```{.r .cell-code}\n# With wb_read\nmy_wb_read <- wb_read(file,\n  detect_dates = TRUE\n)\nglimpse(my_wb_read)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10\nColumns: 9\n$ Var1 <lgl> TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, NA, FALSE, FALSE, NA\n$ Var2 <dbl> 1, NA, 2, 2, 3, 1, NA, 2, 3, 1\n$ NA   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ Var3 <chr> \"1\", \"#NUM!\", \"1.34\", NA, \"1.56\", \"1.7\", NA, \"23\", \"67.3\", \"123\"\n$ Var4 <chr> \"a\", \"b\", \"c\", \"#NUM!\", \"e\", \"f\", NA, \"h\", \"i\", NA\n$ Var5 <date> 2023-05-29, 2023-05-23, 2023-02-01, NA, NA, 2023-03-02, NA, 2023-…\n$ Var6 <chr> \"3209324 This\", NA, NA, NA, NA, NA, NA, NA, NA, NA\n$ Var7 <chr> \"#DIV/0!\", \"0\", \"#VALUE!\", \"2\", NA, \"2.7\", NA, \"25\", \"3\", \"122\"\n$ Var8 <time> 01:27:15, 14:02:57, 23:01:02, 17:24:53,       NA, 08:45:58,      …\n```\n:::\n:::\n\n\nNote that all returned objects have the class `data.frame`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(my_df_loaded)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nclass(my_xslx_read)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nclass(my_wb_read)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\n# Write a File\n\n\n::: {.cell tbl-cap='Write an xlsx or xlsm workbook'}\n\n:::\n\n::: {.cell tbl-cap='Write an xlsx or xlsm workbook' tbl-colwidths='[50,60,60,60]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">openxlsx2</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> Action </th>\n   <th style=\"text-align:left;\"> openxlsx </th>\n   <th style=\"text-align:left;\"> chain </th>\n   <th style=\"text-align:left;\"> pipe </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Create temporary xlsm file </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> `temp_xlsx(macros = TRUE)` </td>\n   <td style=\"text-align:left;\"> `temp_xlsx(macros = TRUE)` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Create temporary xlsx file </td>\n   <td style=\"text-align:left;\"> `temp_xlsx()` </td>\n   <td style=\"text-align:left;\"> `temp_xlsx()` </td>\n   <td style=\"text-align:left;\"> `temp_xlsx()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Write file </td>\n   <td style=\"text-align:left;\"> `write.xlsx()` </td>\n   <td style=\"text-align:left;\"> `write_xlsx()` </td>\n   <td style=\"text-align:left;\"> `write_xlsx()` </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Example\n\nLet's say we want to put the information about `palmerpenguins::penguins` in a new Excel file.\n\nThen, we would like to include `palmerpenguins::penguins_raw` in the same Excel file.\n\nEventually, we want an xlsm file. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Write a data frame into an xlsx file\nmy_tempfile <- temp_xlsx()\nbasename(my_tempfile)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"temp_xlsx_25337c854a96.xlsx\"\n```\n:::\n\n```{.r .cell-code}\nwrite_xlsx(penguins, my_tempfile, col_names = TRUE)\nread_xlsx(my_tempfile) |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n:::\n\n```{.r .cell-code}\n# Write a list of data frames into an xlsx file\nmy_2nd_tempfile <- temp_xlsx()\nbasename(my_2nd_tempfile)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"temp_xlsx_25331e87cab9.xlsx\"\n```\n:::\n\n```{.r .cell-code}\nwrite_xlsx(\n  list(\n    \"penguins\" = penguins,\n    \"penguins_raw\" = penguins_raw\n  ),\n  my_2nd_tempfile,\n  start_col = c(1L, 2L),\n  start_row = c(2L, 3L),\n  col_names = TRUE\n)\nbrowseURL(my_2nd_tempfile) # open in Excel\nread_xlsx(my_2nd_tempfile, sheet = \"penguins\") |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n:::\n\n```{.r .cell-code}\nbrowseURL(my_2nd_tempfile) # open in Excel\nread_xlsx(my_2nd_tempfile, sheet = \"penguins_raw\") |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 17\n   studyName `Sample Number` Species         Region Island Stage `Individual ID`\n   <chr>               <dbl> <chr>           <chr>  <chr>  <chr> <chr>          \n 1 PAL0708                 1 Adelie Penguin… Anvers Torge… Adul… N1A1           \n 2 PAL0708                 2 Adelie Penguin… Anvers Torge… Adul… N1A2           \n 3 PAL0708                 3 Adelie Penguin… Anvers Torge… Adul… N2A1           \n 4 PAL0708                 4 Adelie Penguin… Anvers Torge… Adul… N2A2           \n 5 PAL0708                 5 Adelie Penguin… Anvers Torge… Adul… N3A1           \n 6 PAL0708                 6 Adelie Penguin… Anvers Torge… Adul… N3A2           \n 7 PAL0708                 7 Adelie Penguin… Anvers Torge… Adul… N4A1           \n 8 PAL0708                 8 Adelie Penguin… Anvers Torge… Adul… N4A2           \n 9 PAL0708                 9 Adelie Penguin… Anvers Torge… Adul… N5A1           \n10 PAL0708                10 Adelie Penguin… Anvers Torge… Adul… N5A2           \n# ℹ 334 more rows\n# ℹ 10 more variables: `Clutch Completion` <chr>, `Date Egg` <date>,\n#   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n#   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>, Sex <chr>,\n#   `Delta 15 N (o/oo)` <dbl>, `Delta 13 C (o/oo)` <dbl>, Comments <chr>\n```\n:::\n\n```{.r .cell-code}\n# Write a data frame into an xlsm file\nmy_3rd_tempfile <- temp_xlsx(macros = TRUE)\nbasename(my_3rd_tempfile)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"temp_xlsx_2533148c3065.xlsm\"\n```\n:::\n\n```{.r .cell-code}\nwrite_xlsx(penguins, my_3rd_tempfile, col_names = TRUE)\nread_xlsx(my_3rd_tempfile) |>\n  as_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n:::\n:::\n\n\n# Parse XML Files\n\nAside from the transition to R6, another significant improvement in openxlsx2, compared to openxlsx, is the inclusion of pugixml to reliably parse XML files.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# source: https://www.geeksforgeeks.org/working-with-xml-files-in-r-programming/\npath_xml <- file.path(\n  here::here(),\n  \"posts\", \"2023-11-11_openxlsx2\", \"records.xml\"\n)\n\n# Read an xml file\nmy_xml_file <- read_xml(path_xml)\nmy_xml_file\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<RECORDS>\n <STUDENT>\n  <ID>1</ID>\n  <NAME>Alia</NAME>\n  <MARKS>620</MARKS>\n  <BRANCH>IT</BRANCH>\n </STUDENT>\n <STUDENT>\n  <ID>2</ID>\n  <NAME>Brijesh</NAME>\n  <MARKS>440</MARKS>\n  <BRANCH>Commerce</BRANCH>\n </STUDENT>\n <STUDENT>\n  <ID>3</ID>\n  <NAME>Yash</NAME>\n  <MARKS>600</MARKS>\n  <BRANCH>Humanities</BRANCH>\n </STUDENT>\n <STUDENT>\n  <ID>4</ID>\n  <NAME>Mallika</NAME>\n  <MARKS>660</MARKS>\n  <BRANCH>IT</BRANCH>\n </STUDENT>\n <STUDENT>\n  <ID>5</ID>\n  <NAME>Zayn</NAME>\n  <MARKS>560</MARKS>\n  <BRANCH>IT</BRANCH>\n </STUDENT>\n</RECORDS>\n```\n:::\n\n```{.r .cell-code}\n# Return node\nnode_records <- xml_node(my_xml_file, level1 = \"RECORDS\")\nnode_records\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"<RECORDS><STUDENT><ID>1</ID><NAME>Alia</NAME><MARKS>620</MARKS><BRANCH>IT</BRANCH></STUDENT><STUDENT><ID>2</ID><NAME>Brijesh</NAME><MARKS>440</MARKS><BRANCH>Commerce</BRANCH></STUDENT><STUDENT><ID>3</ID><NAME>Yash</NAME><MARKS>600</MARKS><BRANCH>Humanities</BRANCH></STUDENT><STUDENT><ID>4</ID><NAME>Mallika</NAME><MARKS>660</MARKS><BRANCH>IT</BRANCH></STUDENT><STUDENT><ID>5</ID><NAME>Zayn</NAME><MARKS>560</MARKS><BRANCH>IT</BRANCH></STUDENT></RECORDS>\"\n```\n:::\n\n```{.r .cell-code}\nnode_student <- xml_node(my_xml_file, level1 = \"RECORDS\", level2 = \"STUDENT\")\nnode_student\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"<STUDENT><ID>1</ID><NAME>Alia</NAME><MARKS>620</MARKS><BRANCH>IT</BRANCH></STUDENT>\"         \n[2] \"<STUDENT><ID>2</ID><NAME>Brijesh</NAME><MARKS>440</MARKS><BRANCH>Commerce</BRANCH></STUDENT>\"\n[3] \"<STUDENT><ID>3</ID><NAME>Yash</NAME><MARKS>600</MARKS><BRANCH>Humanities</BRANCH></STUDENT>\" \n[4] \"<STUDENT><ID>4</ID><NAME>Mallika</NAME><MARKS>660</MARKS><BRANCH>IT</BRANCH></STUDENT>\"      \n[5] \"<STUDENT><ID>5</ID><NAME>Zayn</NAME><MARKS>560</MARKS><BRANCH>IT</BRANCH></STUDENT>\"         \n```\n:::\n\n```{.r .cell-code}\nnode_name <- xml_node(my_xml_file,\n  level1 = \"RECORDS\", level2 = \"STUDENT\",\n  level3 = \"NAME\"\n)\nnode_name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"<NAME>Alia</NAME>\"    \"<NAME>Brijesh</NAME>\" \"<NAME>Yash</NAME>\"   \n[4] \"<NAME>Mallika</NAME>\" \"<NAME>Zayn</NAME>\"   \n```\n:::\n\n```{.r .cell-code}\nnode_branch <- xml_node(my_xml_file,\n  level1 = \"RECORDS\", level2 = \"STUDENT\",\n  level3 = \"BRANCH\"\n)\nnode_branch\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"<BRANCH>IT</BRANCH>\"         \"<BRANCH>Commerce</BRANCH>\"  \n[3] \"<BRANCH>Humanities</BRANCH>\" \"<BRANCH>IT</BRANCH>\"        \n[5] \"<BRANCH>IT</BRANCH>\"        \n```\n:::\n\n```{.r .cell-code}\n# Load character string to pugixml and returns an external pointer\nas_xml(node_student)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<STUDENT>\n <ID>1</ID>\n <NAME>Alia</NAME>\n <MARKS>620</MARKS>\n <BRANCH>IT</BRANCH>\n</STUDENT>\n<STUDENT>\n <ID>2</ID>\n <NAME>Brijesh</NAME>\n <MARKS>440</MARKS>\n <BRANCH>Commerce</BRANCH>\n</STUDENT>\n<STUDENT>\n <ID>3</ID>\n <NAME>Yash</NAME>\n <MARKS>600</MARKS>\n <BRANCH>Humanities</BRANCH>\n</STUDENT>\n<STUDENT>\n <ID>4</ID>\n <NAME>Mallika</NAME>\n <MARKS>660</MARKS>\n <BRANCH>IT</BRANCH>\n</STUDENT>\n<STUDENT>\n <ID>5</ID>\n <NAME>Zayn</NAME>\n <MARKS>560</MARKS>\n <BRANCH>IT</BRANCH>\n</STUDENT>\n```\n:::\n\n```{.r .cell-code}\nas_xml(node_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<NAME>Alia</NAME>\n<NAME>Brijesh</NAME>\n<NAME>Yash</NAME>\n<NAME>Mallika</NAME>\n<NAME>Zayn</NAME>\n```\n:::\n\n```{.r .cell-code}\nas_xml(node_branch)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<BRANCH>IT</BRANCH>\n<BRANCH>Commerce</BRANCH>\n<BRANCH>Humanities</BRANCH>\n<BRANCH>IT</BRANCH>\n<BRANCH>IT</BRANCH>\n```\n:::\n\n```{.r .cell-code}\n# Return value\nxml_value(my_xml_file, level1 = \"RECORDS\", level2 = \"STUDENT\", level3 = \"NAME\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Alia\"    \"Brijesh\" \"Yash\"    \"Mallika\" \"Zayn\"   \n```\n:::\n\n```{.r .cell-code}\nxml_value(my_xml_file, level1 = \"RECORDS\", level2 = \"STUDENT\", level3 = \"BRANCH\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"IT\"         \"Commerce\"   \"Humanities\" \"IT\"         \"IT\"        \n```\n:::\n\n```{.r .cell-code}\nxml_value(my_xml_file, level1 = \"RECORDS\", level2 = \"STUDENT\", level3 = \"ID\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n```\n:::\n\n```{.r .cell-code}\nxml_value(my_xml_file, level1 = \"RECORDS\", level2 = \"STUDENT\", level3 = \"MARKS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"620\" \"440\" \"600\" \"660\" \"560\"\n```\n:::\n\n```{.r .cell-code}\n# Return attributes\nxml_attr(my_xml_file, level1 = \"RECORDS\", level2 = \"STUDENT\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nnamed character(0)\n\n[[2]]\nnamed character(0)\n\n[[3]]\nnamed character(0)\n\n[[4]]\nnamed character(0)\n\n[[5]]\nnamed character(0)\n```\n:::\n\n```{.r .cell-code}\nxml_attr(my_xml_file, level1 = \"RECORDS\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nnamed character(0)\n```\n:::\n:::\n\n\n# Create an Excel Workbook from Scratch\n\nLet's say you would like to create a workbook called `wb` and a worksheet called `ws` where you want to write data `x`.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell tbl-cap='Create a workbook and write data' tbl-colwidths='[50,60,60,60]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">openxlsx2</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> Action </th>\n   <th style=\"text-align:left;\"> openxlsx </th>\n   <th style=\"text-align:left;\"> chain </th>\n   <th style=\"text-align:left;\"> pipe </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Create workbook </td>\n   <td style=\"text-align:left;\"> `createWorkbook()` </td>\n   <td style=\"text-align:left;\"> `wb_workbook()` </td>\n   <td style=\"text-align:left;\"> `wb_workbook()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Add worksheet </td>\n   <td style=\"text-align:left;\"> `addWorksheet(wb, 'ws')` </td>\n   <td style=\"text-align:left;\"> `wb$add_worksheet('ws')` </td>\n   <td style=\"text-align:left;\"> `wb_add_worksheet('ws')` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Add data to worksheet </td>\n   <td style=\"text-align:left;\"> `writeData(wb, 'ws', x)` </td>\n   <td style=\"text-align:left;\"> `wb$add_data(x)` </td>\n   <td style=\"text-align:left;\"> `wb_add_data(x)` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Inspect workbook </td>\n   <td style=\"text-align:left;\"> `openXL(wb)` </td>\n   <td style=\"text-align:left;\"> `wb$open()` </td>\n   <td style=\"text-align:left;\"> `wb_open()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Save workbook </td>\n   <td style=\"text-align:left;\"> `saveWorkbook(wb, file) </td>\n   <td style=\"text-align:left;\"> `wb$save(file)` </td>\n   <td style=\"text-align:left;\"> `wb_save(file)` </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Example\n\nIn this example, our aim is to explore various options for creating, saving, and importing an Excel workbook.\n\n### Create a Workbook with Multiple Sheets\n\n::: columns\n::: {.column width=\"47.5%\"}\n#### Chained\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_col_ws1 <- 3L\nstart_row_ws1 <- 10L\n\nwb <- wb_workbook(\n  creator = \"My Name\",\n  title = \"My Test\",\n  subject = \"Create a Workbook\",\n  category = \"Test\",\n  datetime_created = Sys.time(),\n  theme = \"Office Theme\",\n  keywords = \"test\",\n  comments = \"This is my test\",\n  manager = \"Me\",\n  company = \"My Company\"\n)$\n  add_worksheet(\n  sheet = \"my_first_sheet\",\n  tab_color = \"blue\",\n  zoom = 150L,\n  visible = TRUE,\n  orientation = \"portrait\",\n  header = c(\"ODD HEAD LEFT\", \"ODD HEAD CENTER\", \"ODD HEAD RIGHT\"),\n  footer = c(\"ODD FOOT RIGHT\", \"ODD FOOT CENTER\", \"ODD FOOT RIGHT\"),\n  even_header = c(\"EVEN HEAD LEFT\", \"EVEN HEAD CENTER\", \"EVEN HEAD RIGHT\"),\n  even_footer = c(\"EVEN FOOT RIGHT\", \"EVEN FOOT CENTER\", \"EVEN FOOT RIGHT\"),\n  first_header = c(\"TOP\", \"OF FIRST\", \"PAGE\"),\n  first_footer = c(\"BOTTOM\", \"OF FIRST\", \"PAGE\")\n)$\n  add_data(\n  x = penguins,\n  start_col = start_col_ws1,\n  start_row = start_row_ws1,\n  array = FALSE,\n  col_names = TRUE,\n  row_names = FALSE,\n  with_filter = FALSE\n)$\n  add_worksheet(\n  sheet = \"my_second_sheet\",\n  tab_color = \"red\",\n  zoom = 75L,\n  visible = TRUE,\n  orientation = \"landscape\"\n)$\n  add_data(\n  x = penguins_raw,\n  dims = wb_dims(2, 1),\n  col_names = TRUE,\n  row_names = TRUE,\n  with_filter = TRUE\n)\n```\n:::\n\n:::\n\n::: {.column width=\"5%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"47.5%\"}\n#### Piped\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_col_ws1 <- 3L\nstart_row_ws1 <- 10L\n\nwb <- wb_workbook(\n  creator = \"My Name\",\n  title = \"My Test\",\n  subject = \"Create a Workbook\",\n  category = \"Test\",\n  datetime_created = Sys.time(),\n  theme = \"Office Theme\",\n  keywords = \"test\",\n  comments = \"This is my test\",\n  manager = \"Me\",\n  company = \"My Company\"\n) |>\n  wb_add_worksheet(\n    sheet = \"my_first_sheet\",\n    tab_color = \"blue\",\n    zoom = 150L,\n    visible = TRUE,\n    orientation = \"portrait\",\n    header = c(\"ODD HEAD LEFT\", \"ODD HEAD CENTER\", \"ODD HEAD RIGHT\"),\n    footer = c(\"ODD FOOT RIGHT\", \"ODD FOOT CENTER\", \"ODD FOOT RIGHT\"),\n    even_header = c(\"EVEN HEAD LEFT\", \"EVEN HEAD CENTER\", \"EVEN HEAD RIGHT\"),\n    even_footer = c(\"EVEN FOOT RIGHT\", \"EVEN FOOT CENTER\", \"EVEN FOOT RIGHT\"),\n    first_header = c(\"TOP\", \"OF FIRST\", \"PAGE\"),\n    first_footer = c(\"BOTTOM\", \"OF FIRST\", \"PAGE\")\n  ) |>\n  wb_add_data(\n    x = penguins,\n    start_col = start_col_ws1,\n    start_row = start_row_ws1,\n    array = FALSE,\n    col_names = TRUE,\n    row_names = FALSE,\n    with_filter = FALSE\n  ) |>\n  wb_add_worksheet(\n    sheet = \"my_second_sheet\",\n    tab_color = \"red\",\n    zoom = 75L,\n    visible = TRUE,\n    orientation = \"landscape\"\n  ) |>\n  wb_add_data(\n    x = penguins_raw,\n    dims = wb_dims(2, 1),\n    col_names = TRUE,\n    row_names = TRUE,\n    with_filter = TRUE\n  )\n```\n:::\n\n:::\n:::\n\n### Inspect and Write the Workbook Data\n\nYou can perform the following steps to examine the data and save it to a temporary xlsx file.\n\n::: columns\n::: {.column width=\"47.5%\"}\n#### Chained\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect the workbook\nwb$open()\n\n# Create a new temporary file\nmyfile <- temp_xlsx()\n\n# Write the workbook into a temporary xlsx file\nwb$save(file = myfile, overwrite = TRUE)\n\n# Open the xlsx file\nbrowseURL(myfile)\n```\n:::\n\n:::\n\n::: {.column width=\"5%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"47.5%\"}\n#### Piped\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect the workbook\nwb |>\n  wb_open()\n\n# Create a new temporary file\nmyfile <- temp_xlsx()\n\n# Write the workbook into a temporary xlsx file\nwb |>\n  wb_save(file = myfile, overwrite = TRUE)\n\n# Open the xlsx file\nbrowseURL(myfile)\n```\n:::\n\n:::\n:::\n\nPlease be aware that in order to view the headers and footers, you should click on \"View\" and select \"Header and Footer\" (for Mac users). This option enables you to distinguish between the landscape and portrait orientations on the two sheets.\n\n### Import a Workbook and Start Working on the Data with dplyr\n\nHere, no operations are available for chaining.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the data of your file into a data frame\nmy_df <- myfile |>\n  wb_to_df(\n    sheet = 1,\n    detect_dates = TRUE,\n    col_names = TRUE\n  )\n\n# Display the first few rows of the data frame\nmy_df |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n11  Adelie Torgersen           39.1          18.7               181        3750\n12  Adelie Torgersen           39.5          17.4               186        3800\n13  Adelie Torgersen           40.3          18.0               195        3250\n14  Adelie Torgersen             NA            NA                NA          NA\n15  Adelie Torgersen           36.7          19.3               193        3450\n16  Adelie Torgersen           39.3          20.6               190        3650\n      sex year\n11   male 2007\n12 female 2007\n13 female 2007\n14   <NA> 2007\n15 female 2007\n16   male 2007\n```\n:::\n\n```{.r .cell-code}\n# Provide a summary of the data frame structure\nmy_df |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <chr> \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"A…\n$ island            <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", …\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <dbl> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <dbl> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <chr> \"male\", \"female\", \"female\", NA, \"female\", \"male\", \"f…\n$ year              <dbl> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n\n```{.r .cell-code}\n# Provide the class of the data frame\nclass(my_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\n# Convert it into a tibble\nmy_tib <- as_tibble(my_df)\nmy_tib\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n:::\n:::\n\n\n# Add a Drop-Down List to Your Workbook\n\nLet's assume you have a workbook called `wb`.\n\nTo add a drop-down list, you must first add the data to a separate sheet[^1]. We also want to keep it hidden. You can then create a drop-down list with `wb_add_data_validation()`.\n\n[^1]: Please refer to my older [blog post on openxlsx.demo](https://rdiscovery.netlify.app/posts/2023-04-02_openxlsxdemo/#step-2-create-a-drop-down-list).\n\nIt is also possible to apply various styles to the values of your drop-down list with `wb_add_conditional_formatting()`.\n\n\n::: {.cell tbl-cap='Add a Drop-Down List to Your Workbook'}\n\n:::\n\n::: {.cell tbl-cap='Add a Drop-Down List to Your Workbook' tbl-colwidths='[50,60,60,60]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">openxlsx2</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> Action </th>\n   <th style=\"text-align:left;\"> openxlsx </th>\n   <th style=\"text-align:left;\"> chain </th>\n   <th style=\"text-align:left;\"> pipe </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Add a drop-down list </td>\n   <td style=\"text-align:left;\"> `dataValidation()` </td>\n   <td style=\"text-align:left;\"> `wb$add_data_validation()` </td>\n   <td style=\"text-align:left;\"> `wb_add_data_validation()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Add conditional formatting </td>\n   <td style=\"text-align:left;\"> `conditionalFormatting()` </td>\n   <td style=\"text-align:left;\"> `wb$add_conditional_formatting()` </td>\n   <td style=\"text-align:left;\"> `wb_add_conditional_formatting()` </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Example\n\n::: columns\n::: {.column width=\"47.5%\"}\n#### Chained\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_ddl <- wb$\n  add_worksheet(\"drop-down_list\", visible = \"hidden\")$\n  add_data(\n  x = c(\"huge\", \"big\", \"normal\", \"small\", \"tiny\"),\n  start_col = 1L,\n  start_row = 1L\n)$\n  add_data(\n  sheet = \"my_first_sheet\",\n  x = \"size\",\n  start_col = which(names(penguins) == last(names(penguins))) + start_col_ws1,\n  start_row = start_row_ws1\n)$\n  add_data_validation(\n  sheet = \"my_first_sheet\",\n  dims = wb_dims(\n    x = penguins,\n    cols = which(names(penguins) == last(names(penguins))) + start_col_ws1,\n    from_row = start_row_ws1\n  ),\n  operator = \"equal\",\n  type = \"list\",\n  value = \"'drop-down_list'!$A$1:$A$5\"\n)\n```\n:::\n\n:::\n\n::: {.column width=\"5%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"47.5%\"}\n#### Piped\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_ddl <- wb |>\n  wb_add_worksheet(\"drop-down_list\", visible = \"hidden\") |>\n  wb_add_data(\n    x = c(\"huge\", \"big\", \"normal\", \"small\", \"tiny\"),\n    start_col = 1L,\n    start_row = 1L\n  ) |>\n  wb_add_data(\n    sheet = \"my_first_sheet\",\n    x = \"size\",\n    start_col = which(names(penguins) == last(names(penguins))) + start_col_ws1,\n    start_row = start_row_ws1\n  ) |>\n  wb_add_data_validation(\n    sheet = \"my_first_sheet\",\n    dims = wb_dims(\n      x = penguins,\n      cols = which(names(penguins) == last(names(penguins))) + start_col_ws1,\n      from_row = start_row_ws1\n    ),\n    operator = \"equal\",\n    type = \"list\",\n    value = \"'drop-down_list'!$A$1:$A$5\"\n  )\n```\n:::\n\n:::\n:::\n\n#### Add Colors to Your Drop-Down Values\n\nIn order to make it look better, we can format each of the values of the drop-down list.\n\n::: columns\n::: {.column width=\"47.5%\"}\n##### Chained\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndims <- wb_dims(\n  x = penguins,\n  cols = which(names(penguins) == last(names(penguins))) + start_col_ws1,\n  from_row = start_row_ws1\n)\n\nwb_cf <- wb_ddl$\n  add_dxfs_style(\n  name = \"style_huge\",\n  bg_fill = wb_color(\"#AAAAAA\")\n)$\n  add_dxfs_style(\n  name = \"style_big\",\n  bg_fill = wb_color(\"#6FA8DC\")\n)$\n  add_dxfs_style(\n  name = \"style_normal\",\n  bg_fill = wb_color(\"#00AA00\")\n)$\n  add_dxfs_style(\n  name = \"style_small\",\n  bg_fill = wb_color(\"#CCCC00\")\n)$\n  add_dxfs_style(\n  name = \"style_tiny\",\n  bg_fill = wb_color(\"#CC0000\"),\n  font_color = wb_color(\"#EEEEEE\")\n)$\n  add_conditional_formatting(\n  dims = dims,\n  type = \"containsText\",\n  rule = \"huge\",\n  style = \"style_huge\"\n)$\n  add_conditional_formatting(\n  dims = dims,\n  type = \"containsText\",\n  rule = \"big\",\n  style = \"style_big\"\n)$\n  add_conditional_formatting(\n  dims = dims,\n  type = \"containsText\",\n  rule = \"normal\",\n  style = \"style_normal\"\n)$\n  add_conditional_formatting(\n  dims = dims,\n  type = \"containsText\",\n  rule = \"small\",\n  style = \"style_small\"\n)$\n  add_conditional_formatting(\n  dims = dims,\n  type = \"containsText\",\n  rule = \"tiny\",\n  style = \"style_tiny\"\n)\n```\n:::\n\n:::\n\n::: {.column width=\"5%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"47.5%\"}\n##### Piped\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndims <- wb_dims(\n  x = penguins,\n  cols = which(names(penguins) == last(names(penguins))) + start_col_ws1,\n  from_row = start_row_ws1\n)\n\nwb_cf <- wb_ddl |>\n  wb_add_dxfs_style(\n    name = \"style_huge\",\n    bg_fill = wb_color(\"#AAAAAA\")\n  ) |>\n  wb_add_dxfs_style(\n    name = \"style_big\",\n    bg_fill = wb_color(\"#6FA8DC\")\n  ) |>\n  wb_add_dxfs_style(\n    name = \"style_normal\",\n    bg_fill = wb_color(\"#00AA00\")\n  ) |>\n  wb_add_dxfs_style(\n    name = \"style_small\",\n    bg_fill = wb_color(\"#CCCC00\")\n  ) |>\n  wb_add_dxfs_style(\n    name = \"style_tiny\",\n    bg_fill = wb_color(\"#CC0000\"),\n    font_color = wb_color(\"#EEEEEE\")\n  ) |>\n  wb_add_conditional_formatting(\n    dims = dims,\n    type = \"containsText\",\n    rule = \"huge\",\n    style = \"style_huge\"\n  ) |>\n  wb_add_conditional_formatting(\n    dims = dims,\n    type = \"containsText\",\n    rule = \"big\",\n    style = \"style_big\"\n  ) |>\n  wb_add_conditional_formatting(\n    dims = dims,\n    type = \"containsText\",\n    rule = \"normal\",\n    style = \"style_normal\"\n  ) |>\n  wb_add_conditional_formatting(\n    dims = dims,\n    type = \"containsText\",\n    rule = \"small\",\n    style = \"style_small\"\n  ) |>\n  wb_add_conditional_formatting(\n    dims = dims,\n    type = \"containsText\",\n    rule = \"tiny\",\n    style = \"style_tiny\"\n  )\n```\n:::\n\n:::\n:::\n\n# Filter Data, Protect Worksheet and Freeze your a Worksheet Pane\n\nLet's say you have a workbook called `wb` and you would like to add some filters, to protect a worksheet and to freeze data.\n\n\n::: {.cell tbl-cap='Manage and Secure your Data'}\n\n:::\n\n::: {.cell tbl-cap='Manage and Secure your Data' tbl-colwidths='[50,60,60,60]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">openxlsx2</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> Action </th>\n   <th style=\"text-align:left;\"> openxlsx </th>\n   <th style=\"text-align:left;\"> chain </th>\n   <th style=\"text-align:left;\"> pipe </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Filter data </td>\n   <td style=\"text-align:left;\"> `addFilter()` </td>\n   <td style=\"text-align:left;\"> `wb$add_filter()` </td>\n   <td style=\"text-align:left;\"> `wb_add_filter()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Protect worksheet </td>\n   <td style=\"text-align:left;\"> `protectWorksheet()` </td>\n   <td style=\"text-align:left;\"> `wb$protect_worksheet()` </td>\n   <td style=\"text-align:left;\"> `wb_protect_worksheet()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Freeze data </td>\n   <td style=\"text-align:left;\"> `freezePane()` </td>\n   <td style=\"text-align:left;\"> `wb$freeze_pane()` </td>\n   <td style=\"text-align:left;\"> `wb_freeze_pane()` </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Example\n\nIt's important to note that when you use `wb_add_filter()`, every column in between the specified ones will also inherit a filter. So, if you don't want a filter to be added to certain columns, you'll need to rearrange your dataset accordingly to achieve the desired outcome.\n\nIn the following example, we will make the following improvements:\n\n-   Add a filter to the two first columns, namely `species` and `island`\n\n-   Set the first active row to the one that contains data, just below the column names, and the first active column to to the `island` column (the second one)\n\n-   Protect the second worksheet called \"my_second_sheet\"\n\n::: columns\n::: {.column width=\"47.5%\"}\n##### Chained\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_pff <- wb_cf$\n  add_filter(\n  sheet = \"my_first_sheet\",\n  rows = start_row_ws1,\n  cols = start_col_ws1 - 1 + c(\n    which(names(penguins) == \"species\"),\n    which(names(penguins) == \"island\")\n  )\n)$\n  freeze_pane(\n  first_active_row = start_row_ws1 + 1,\n  first_active_col = start_col_ws1 + 1\n)$\n  protect_worksheet(\n  sheet = \"my_second_sheet\"\n)$\n  protect_worksheet(\n  sheet = \"my_first_sheet\",\n  protect = TRUE,\n  # Formatting cells / columns is allowed,\n  # but inserting / deleting columns is protected:\n  c(\n    formatCells = FALSE, formatColumns = FALSE,\n    insertColumns = TRUE, deleteColumns = TRUE\n  )\n)\n```\n:::\n\n:::\n\n::: {.column width=\"5%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"47.5%\"}\n##### Piped\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_pff <- wb_cf |>\n  wb_add_filter(\n    sheet = \"my_first_sheet\",\n    rows = start_row_ws1,\n    cols = start_col_ws1 - 1 + c(\n      which(names(penguins) == \"species\"),\n      which(names(penguins) == \"island\")\n    )\n  ) |>\n  wb_freeze_pane(\n    first_active_row = start_row_ws1 + 1,\n    first_active_col = start_col_ws1 + 1\n  ) |>\n  wb_protect_worksheet(\n    sheet = \"my_second_sheet\"\n  ) |>\n  wb_protect_worksheet(\n    sheet = \"my_first_sheet\",\n    protect = TRUE,\n    # Formatting cells / columns is allowed,\n    # but inserting / deleting columns is protected:\n    c(\n      formatCells = FALSE, formatColumns = FALSE,\n      insertColumns = TRUE, deleteColumns = TRUE\n    )\n  )\n```\n:::\n\n:::\n:::\n\n# Make Your Data Shine\n\nLet's say you have a workbook called `wb` and you would like to some styling.\n\nThe following functions will help you format your data as you wish in your worksheet.\n\n\n::: {.cell tbl-cap='Format your Data'}\n\n:::\n\n::: {.cell tbl-cap='Format your Data' tbl-colwidths='[50,60,60,60]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">openxlsx2</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> Action </th>\n   <th style=\"text-align:left;\"> openxlsx </th>\n   <th style=\"text-align:left;\"> chain </th>\n   <th style=\"text-align:left;\"> pipe </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Add font </td>\n   <td style=\"text-align:left;\"> `addStyle()`, `createStyle()` </td>\n   <td style=\"text-align:left;\"> `wb$add_font()` </td>\n   <td style=\"text-align:left;\"> `wb_add_font()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Add cell style </td>\n   <td style=\"text-align:left;\"> `addStyle()`, `createStyle()` </td>\n   <td style=\"text-align:left;\"> `wb$add_cell_style()` </td>\n   <td style=\"text-align:left;\"> `wb_add_cell_style()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Add background fill color </td>\n   <td style=\"text-align:left;\"> `addStyle()`, `createStyle()` </td>\n   <td style=\"text-align:left;\"> `wb$add_fill()` </td>\n   <td style=\"text-align:left;\"> `wb_add_fill()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Add number formatting </td>\n   <td style=\"text-align:left;\"> `addStyle()`, `createStyle()` </td>\n   <td style=\"text-align:left;\"> `wb$add_numfmt()` </td>\n   <td style=\"text-align:left;\"> `wb_add_numfmt()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Set column width </td>\n   <td style=\"text-align:left;\"> `setColWidths()` </td>\n   <td style=\"text-align:left;\"> `wb$set_col_widths()` </td>\n   <td style=\"text-align:left;\"> `wb_set_col_widths()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Add border </td>\n   <td style=\"text-align:left;\"> `addStyle()`, `createStyle()` </td>\n   <td style=\"text-align:left;\"> `wb$add_border()` </td>\n   <td style=\"text-align:left;\"> `wb_add_border()` </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nThese helpers could be used to apply these formatting functions:\n\n-   `wb_dims()`: Helper to specify the dims argument\n\n-   `int2col()`: Convert integer to Excel column\n\n## Example\n\n::: columns\n::: {.column width=\"47.5%\"}\n##### Chained\n\n\n::: {.cell}\n\n```{.r .cell-code}\nws1_colnames <- wb_dims(\n  rows = start_row_ws1,\n  cols = seq_len(\n    ncol(penguins) + 1\n  ) +\n    start_col_ws1 - 1\n)\n\nws1_data <- wb_dims(\n  x = penguins,\n  from_row = start_row_ws1,\n  rows = seq_len(nrow(penguins)),\n  from_col = start_col_ws1,\n  cols = seq_len(ncol(penguins) + 1)\n)\n\ncol_bmg <- wb_dims(\n  x = penguins,\n  from_row = start_row_ws1,\n  rows = seq_len(nrow(penguins)),\n  cols = which(names(penguins) == \"body_mass_g\") +\n    start_col_ws1 - 1\n)\n\ncol_size <- wb_dims(\n  x = penguins,\n  cols = which(names(penguins) == last(names(penguins))) + start_col_ws1,\n  from_row = start_row_ws1\n)\n\nwb_format <- wb_pff$\n  add_font(\n  sheet = 1,\n  dims = ws1_colnames, # add font to the original penguins variables\n  size = 12,\n  bold = TRUE\n)$\n  add_border(\n  sheet = 1,\n  dims = ws1_data,\n  bottom_border = \"thin\",\n  left_border = \"thin\",\n  right_border = \"thin\",\n  top_border = NULL\n)$\n  add_border(\n  sheet = 1,\n  dims = ws1_colnames,\n  bottom_border = \"thick\",\n  left_border = \"thick\",\n  right_border = \"thick\",\n  top_border = \"thick\"\n)$\n  add_cell_style(\n  dims = ws1_data,\n  vertical = \"top\",\n  horizontal = \"left\",\n  wrap_text = TRUE,\n  locked = FALSE\n)$\n  add_cell_style(\n  dims = ws1_colnames,\n  vertical = \"center\",\n  horizontal = \"center\",\n  wrap_text = TRUE\n)$\n  set_col_widths(\n  cols = int2col(\n    seq_len(ncol(penguins) + 1)\n  ),\n  widths = 22\n)$\n  add_numfmt(\n  dims = col_bmg,\n  numfmt = \"#.0\"\n)$\n  add_fill(\n  dims = col_size,\n  color = wb_color(\"#d9d2e9\")\n)\n```\n:::\n\n:::\n\n::: {.column width=\"5%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"47.5%\"}\n##### Piped\n\n\n::: {.cell}\n\n```{.r .cell-code}\nws1_colnames <- wb_dims(\n  rows = start_row_ws1,\n  cols = seq_len(\n    ncol(penguins) + 1\n  ) +\n    start_col_ws1 - 1\n)\n\nws1_data <- wb_dims(\n  x = penguins,\n  from_row = start_row_ws1,\n  rows = seq_len(nrow(penguins)),\n  from_col = start_col_ws1,\n  cols = seq_len(ncol(penguins) + 1)\n)\n\ncol_bmg <- wb_dims(\n  x = penguins,\n  from_row = start_row_ws1,\n  rows = seq_len(nrow(penguins)),\n  cols = which(names(penguins) == \"body_mass_g\") +\n    start_col_ws1 - 1\n)\n\ncol_size <- wb_dims(\n  x = penguins,\n  cols = which(names(penguins) == last(names(penguins))) + start_col_ws1,\n  from_row = start_row_ws1\n)\n\nwb_format <- wb_pff |>\n  wb_add_font(\n    sheet = 1,\n    dims = ws1_colnames, # add font to the original penguins variables\n    size = 12,\n    bold = TRUE\n  ) |>\n  wb_add_border(\n    sheet = 1,\n    dims = ws1_data,\n    bottom_border = \"thin\",\n    left_border = \"thin\",\n    right_border = \"thin\",\n    top_border = NULL\n  ) |>\n  wb_add_border(\n    sheet = 1,\n    dims = ws1_colnames,\n    bottom_border = \"thick\",\n    left_border = \"thick\",\n    right_border = \"thick\",\n    top_border = \"thick\"\n  ) |>\n  wb_add_cell_style(\n    dims = ws1_data,\n    vertical = \"top\",\n    horizontal = \"left\",\n    wrap_text = TRUE,\n    locked = FALSE\n  ) |>\n  wb_add_cell_style(\n    dims = ws1_colnames,\n    vertical = \"center\",\n    horizontal = \"center\",\n    wrap_text = TRUE\n  ) |>\n  wb_set_col_widths(\n    cols = int2col(\n      seq_len(ncol(penguins) + 1)\n    ),\n    widths = 22\n  ) |>\n  wb_add_numfmt(\n    dims = col_bmg,\n    numfmt = \"#.0\"\n  ) |>\n  wb_add_fill(\n    dims = col_size,\n    color = wb_color(\"#d9d2e9\")\n  )\n```\n:::\n\n:::\n:::\n\n# Output\n\nYou can download the final Excel output [here](https://github.com/Layalchristine24/rdiscovery/blob/main/posts/2023-11-11_openxlsx2/excel_demo.xlsx).\n\n# Acknowledgements\n\nThank you for reading. Enjoy using [openxlsx2](https://github.com/JanMarvin/openxlsx2)!\n\nMany thanks to the [openxlsx2](https://github.com/JanMarvin/openxlsx2) developers: \n\n- [\\@JanMarvin](https://github.com/JanMarvin)  \n\n- [\\@jmbarbone](https://github.com/jmbarbone) \n\n- [\\@olivroy](https://github.com/olivroy)\n\n- [\\@sjewo](https://github.com/sjewo)\n\n\n# References\n\n- [openxlsx](https://github.com/awalker89/openxlsx) \n\n- [openxlsx2](https://github.com/JanMarvin/openxlsx2)\n\n- [Github Gist](https://gist.github.com/JanMarvin/a0d89bb8e128899477654dd2d4f4402d)\n\n- [Update from openxlsx](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html)\n    - [Styles](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html#styles)\n\n    - [Why openxlsx2](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html?q=r6#why-openxlsx2)\n\n- [Chapter 6 of \"Advanced R\" by Hadley Wickham](https://adv-r.hadley.nz/r6.html#r6)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}