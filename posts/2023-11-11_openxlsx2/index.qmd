---
title: Switch from openxlsx to openxlsx2
author:
  - name:
      given: Layal Christine
      family: Lettry
      orcid: 0009-0008-6396-0523
    affiliations:
      - id: cynkra
      - name: cynkra GmbH
        city: Zurich
        state: CH
      - id: unifr
      - name: University of Fribourg, Dept. of Informatics, ASAM Group
        city: Fribourg
        state: CH
date: 2023-11-11
categories: [openxlsx, openxlsx2]
image: image.jpg
citation: 
  url: https://rdiscovery.netlify.app/posts/2023-11-11_openxlsx2/
format:
  html:
    toc: true
    toc-depth: 6
    toc-title: Contents
    toc-location: right
    number-sections: false
---

*What are the main differences between [openxlsx](https://github.com/awalker89/openxlsx) and [openxlsx2](https://github.com/JanMarvin/openxlsx2)?*

### Introduction

Within this blog post, my aim is to elucidate the primary distinctions between [openxlsx](https://github.com/awalker89/openxlsx) and [openxlsx2](https://github.com/JanMarvin/openxlsx2). I've encountered these variances through a [Github Gist](https://gist.github.com/JanMarvin/a0d89bb8e128899477654dd2d4f4402d), the informative vignette titled ["Update from openxlsx"](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html), and my personal hands-on experience.

The provided tables are designed to offer a clear overview of the differences between openxlsx and openxlsx2. They serve as a concise presentation, illustrating the content of the vignette titled "Update from openxlsx," which can be explored in detail [here](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html).

### Chaining versus Piping

In contrast to openxlsx, openxlsx2 enables the creation of workbooks, the addition of styles, data writing, and other operations through the use of chained or piped operations.

If you lean towards using pipes, please turn to the last column in the tables within the subsequent sections. This column specifies the corresponding function and its recommended usage with pipes. If the function is the same in both columns, it can be used with pipes or chains.

In the tables below, we've highlighted the key arguments for each function. For a deeper dive into the specifics of each function's arguments, check out the examples in the following sections.

Kindly explore [this specific vignette section](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html#styles) for an example that contrasts openxlsx and openxlsx2. Unlike openxlsx, which lacks integration with pipes or chains, openxlsx2 offers flexibility in its application.

In the upcoming examples, I'll use pipes, but feel free to use chains if you prefer.

Building a workbook with pipes or chains, instead of relying on isolated functions, is already a significant improvement!

### Read an existing Excel Workbook

```{r}
#| label: table_read_wb
#| tbl-cap: "Create a workbook and write data"
#| message: false
#| warning: false
#| echo: false

library(knitr)

table_read_wb <- tibble::tribble(
  ~Action, ~openxlsx, ~`chain`, ~`pipe`,
  "Load file", "", "`wb_load()`", "`wb_load()`",
  "Read file", "", "`wb_to_df()`", "`wb_to_df()`",
  "Read file", "`read.xlsx()`", "`read_xlsx()`", "`read_xlsx()`",
  "Read file", "`readWorkbook()`", "`wb_read()`", "`wb_read()`"
)
```

Please note that while openxlsx2 can read `xlsx` or `xlsm` files, openxlsx can only read `xlsx` files.

```{r}
#| label: print_table_read_wb
#| tbl-cap: "Read an existing Excel workbook"
#| tbl-colwidths: [50,60,60,60]
#| echo: false
#| output: asis
kable(table_read_wb) |>
  kableExtra::add_header_above(c(" " = 1, " " = 1, "openxlsx2" = 2))
```

Please be aware that the recently introduced functions in openxlsx2, namely `read_xlsx()` and `wb_read()`, serve as mere wrappers for `wb_to_df()`. Their purpose is to facilitate a seamless transition between openxlsx and openxlsx2.

### Write a file (xlsx or xlsm)

```{r}
#| label: table_write_wb
#| tbl-cap: "Write an xlsx or xlsm workbook"
#| message: false
#| warning: false
#| echo: false

library(knitr)

table_write_wb <- tibble::tribble(
  ~Action, ~openxlsx, ~`chain`, ~`pipe`,
  "Create temporary xlsm file", "", "`temp_xlsx(macros = TRUE)`", "`temp_xlsx(macros = TRUE)`",
  "Create temporary xlsx file", "`temp_xlsx()`", "`temp_xlsx()`", "`temp_xlsx()`",
  "Write file", "`write.xlsx()`", "`write_xlsx()`", "`write_xlsx()`"
)
```


```{r}
#| label: print_table_write_wb
#| tbl-cap: "Write an xlsx or xlsm workbook"
#| tbl-colwidths: [50,60,60,60]
#| echo: false
#| output: asis
kable(table_write_wb) |>
  kableExtra::add_header_above(c(" " = 1, " " = 1, "openxlsx2" = 2))
```


### Create an Excel Workbook from Scratch

Let's say you would like to create a workbook called `wb` and a worksheet called `ws` where you want to write data `x`. 

```{r}
#| label: table_create_wb
#| message: false
#| warning: false
#| echo: false

library(knitr)

table_create_wb <- tibble::tribble(
  ~Action, ~openxlsx, ~`chain`, ~`pipe`,
  "Create workbook", "`createWorkbook()`", "`wb_workbook()`", "`wb_workbook()`",
  "Add worksheet ", "`addWorksheet(wb, 'ws')`", "`wb$add_worksheet('ws')`", "`wb_add_worksheet('ws')`",
  "Add data to worksheet", "`writeData(wb, 'ws', x)`", "`wb$add_data(x)`", "`wb_add_data(x)`",
  "Inspect workbook", "`openXL(wb)`", "`wb$open()`", "`wb_open()`",
  "Save workbook", "`saveWorkbook(wb, file)", "`wb$save(file)`", "`wb_save(file)`"
)
```


```{r}
#| label: print_table_create_wb
#| tbl-cap: "Create a workbook and write data"
#| tbl-colwidths: [50,60,60,60]
#| echo: false
#| output: asis
kable(table_create_wb) |>
  kableExtra::add_header_above(c(" " = 1, " " = 1, "openxlsx2" = 2))
```

#### Example

In this example, our aim is to explore various options for creating, saving, and importing an Excel workbook.

##### Create a workbook with multiple sheets

```{r}
#| label: ex_table_create_wb_1
#| message: false
#| warning: false

library(openxlsx2)
library(palmerpenguins)

wb <- wb_workbook(
  creator = "Layal Christine Lettry",
  title = "My Test",
  subject = "Create a Workbook",
  category = "Test",
  datetime_created = Sys.time(),
  theme = "Office Theme",
  keywords = "test",
  comments = "This is my test",
  manager = "Me",
  company = "My Company"
) |>
  wb_add_worksheet(
    sheet = "my_first_sheet",
    tab_color = "blue",
    zoom = 150L,
    visible = TRUE,
    orientation = "portrait",
    header = c("ODD HEAD LEFT", "ODD HEAD CENTER", "ODD HEAD RIGHT"),
    footer = c("ODD FOOT RIGHT", "ODD FOOT CENTER", "ODD FOOT RIGHT"),
    even_header = c("EVEN HEAD LEFT", "EVEN HEAD CENTER", "EVEN HEAD RIGHT"),
    even_footer = c("EVEN FOOT RIGHT", "EVEN FOOT CENTER", "EVEN FOOT RIGHT"),
    first_header = c("TOP", "OF FIRST", "PAGE"),
    first_footer = c("BOTTOM", "OF FIRST", "PAGE")
  ) |>
  wb_add_data(
    x = penguins,
    start_col = 3,
    start_row = 10,
    array = FALSE,
    col_names = TRUE,
    row_names = FALSE,
    with_filter = FALSE
  ) |>
  wb_add_worksheet(
    sheet = "my_second_sheet",
    tab_color = "red",
    zoom = 75L,
    visible = TRUE,
    orientation = "landscape"
  ) |>
  wb_add_data(
    x = penguins_raw,
    dims = wb_dims(2, 1),
    col_names = TRUE,
    row_names = TRUE,
    with_filter = TRUE
  )
```


##### Inspect and write the workbook data

You can perform the following steps to examine the data and save it to a temporary xlsx file.

```{r}
#| label: ex_table_create_wb_2
#| message: false
#| warning: false

# Inspect the workbook
wb |>
  wb_open()

# Create a new temporary file
myfile <- temp_xlsx()

# Write the workbook into a temporary xlsx file
wb |>
  wb_save(file = myfile, overwrite = TRUE)

# Open the xlsx file
browseURL(myfile)
```

Please be aware that in order to view the headers and footers, you should click on "View" and select "Header and Footer" (for Mac users). This option enables you to distinguish between the landscape and portrait orientations on the two sheets.

##### Import workbook and start working on the data with dplyr

```{r}
#| label: ex_table_create_wb_3
#| message: false
#| warning: false

# Import the data of your file into a data frame
my_df <- myfile |>
  wb_to_df(
    sheet = 1,
    detect_dates = TRUE,
    col_names = TRUE
  )

# Display the first few rows of the data frame
my_df |>
  head()

# Provide a summary of the data frame structure
my_df |>
  dplyr::glimpse()

# Provide the class of the data frame
class(my_df)

# Convert it into a tibble
my_tib <- tibble::as_tibble(my_df)
my_tib
```


