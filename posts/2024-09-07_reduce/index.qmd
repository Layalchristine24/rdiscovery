---
title: What functions can you use to iterate a vector?
author:
  - name:
      given: Layal Christine
      family: Lettry
      orcid: 0009-0008-6396-0523
    affiliations:
      - id: cynkra
      - name: cynkra GmbH
        city: Zurich
        state: CH
      - id: unifr
      - name: University of Fribourg, Dept. of Informatics, ASAM Group
        city: Fribourg
        state: CH
date: 2024-09-07
categories: [purrr, constructive, reduce]
image: image.jpg
citation: 
  url: https://rdiscovery.netlify.app/posts/2024-08-28_frame-functions/
format:
  html:
    toc: true
    toc-depth: 6
    toc-title: Contents
    toc-location: right
    number-sections: false
editor_options: 
  chunk_output_type: console
---

*Which functions could you use to replace a loop?*

# Initial object

Let's assume that we have a numeric vector and a list.

```{r}
my_vec <- c("first" = 1L, "second" = 2L, "third" = 3L, "fourth" = 4L)
constructive::construct(my_vec)
```

# Use `reduce()` from purrr

Let's say we want to compute the sum and the product of all the elements of our vector.

```{r}
my_vec |>
  purrr::reduce(`+`)

my_vec |>
  purrr::reduce(`*`)
```

It is the same as doing

```{r}
my_vec |> sum()

my_vec |> prod()
```

This means that `reduce()` took the vector values and applied the `+` or `*` function iteratively in the `forward` direction (default).

## Difference between the forward and the backward direction

Let the function `f` be defined by `f(a, b) = a + b`, then `reduce()` will apply this to `my_vec`, i.e. 

$$
f(f(f(1, 2), 3), 4) = f(f(3, 3), 4) = f(6, 4) = 10.
$$

If the direction had been set to `backwards`, the following would have happened: 

$$
f(f(f(4, 3), 2), 1) = f(f(7, 2), 1) = f(9, 1) = 10.
$$ 
To see the difference between `forward` and `backward`, let us subtract the elements of our vector iteratively.

```{r}
my_vec |>
  purrr::reduce(`-`)

my_vec |>
  purrr::reduce(`-`, .dir = "backward")
```

Indeed, let the function `g` be defined by `g(a, b) = a - b`, then the `forward` subtraction corresponds to this operation: 

$$
g(g(g(1, 2), 3), 4) = g(g(-1, 3), 4) = g(-4, 4) = -8. 
$$

The the `backward` subtraction would be:

$$ 
g(g(g(4, 3), 2), 1) = g(g(1, 2), 1) = g(-1, 1) = -2.
$$

## Initial value of the accumulation

We could set the initial value of the accumulation.

```{r}
my_vec[[3]]

my_vec |>
  purrr::reduce(`-`, .init = my_vec[[3]])
```

The above operation is the same operation as the one before, but with one additional argument and starting with the value of `3` that corresponds to `my_vec[[3]]`:

$$
g(g(g(g(3, 1), 2), 3), 4) = g(g(g(2, 2), 3), 4) = g(g(0, 3), 4) = g(-3, 4) = -7.
$$

## Apply a predefined function iteratively

### With two arguments

Let's say we want to compute the empiric variance for our vector. 

We usually compute it with `var(my_vec) =` `r var(my_vec)`. This is an unbiased estimator of the variance because the denominator is `n-1 = length(my_vec) - 1 =` `r length(my_vec) - 1`. The following operation:

```{r}
1 / (length(my_vec) - 1) * sum((my_vec - mean(my_vec))^2)
```

corresponds to 

$$ 
1/(n-1) \sum_{(i = 1)}^n (x_i - \bar{x})^2.
$$
However, it does not work when we try to apply this formula using `reduce()`, because we need to supply two arguments. 

```{r}
#| error: true

# does not work
my_vec |>
  purrr::reduce(\(x) 1 / (length(x) - 1) * sum((x - mean(x))^2))
```

Let's do it by entering two arguments into the `reduce()` function.

```{r}
# works but is not the variance of my_vec
my_vec |>
  purrr::reduce(\(x, y) var(c(x, y)))

# or
my_var <- function(x, y) {
  1 / (length(c(x, y)) - 1) * sum((c(x, y) - mean(c(x, y)))^2)
}
my_vec |>
  purrr::reduce(\(x, y) my_var(x, y))
```

So, what does `reduce()` compute?

Let $x =$ `my_vec` and $h(x_1, x_2)$ be a function defined by
$$
h(x_1, x_2) = var(x_1, x_2) = 1/(2-1) \sum_{(i = 1)}^2 (x_i - \bar{x})^2 = \left[x_1 - \frac{(x_1 + x_2)}{2}\right]^2 + \left[x_2 - \frac{(x_1 + x_2)}{2}\right]^2.
$$
Thus, we get `r purrr::reduce(my_vec, \(x, y) var(c(x, y)))` because `reduce()` computes $h(h(h(1, 2), 3), 4)$ which is equal to 

```{r}
var(c(var(c(var(my_vec[1:2]), my_vec[3])), my_vec[4]))

# or

my_var(my_var(my_var(my_vec[[1]], my_vec[[2]]), my_vec[[3]]), my_vec[[4]])
```


### With three arguments

The function `reduce2()` takes as arguments a first vector and a second one which is shorter than the former by one element, if `.init` is not specified. Otherwise, both arguments should have  the same number of of elements..

```{r}
my_x <- my_vec
my_y <- my_vec

purrr::reduce2(my_x, my_y, paste, .init = 5)

my_x <- my_vec |> unname()
my_y <- my_x[-length(my_x)] + 6 

purrr::reduce2(my_x, my_y, paste)
```

The `reduce2()` function takes as the initial value the first element of the first argument, if `.init` is not specified. Otherwise, the argument `.init` gives the first element. This is the first argument Then, the values going from the first non-used element of the two arguments (here `my_x` and `my_y`) will be the second and the third elements. 


