{
  "hash": "4f4786e63ad20a4023fbe43865f2babd",
  "result": {
    "markdown": "---\ntitle: Switch from openxlsx to openxlsx2\nauthor:\n  - name:\n      given: Layal Christine\n      family: Lettry\n      orcid: 0009-0008-6396-0523\n    affiliations:\n      - id: cynkra\n      - name: cynkra GmbH\n        city: Zurich\n        state: CH\n      - id: unifr\n      - name: University of Fribourg, Dept. of Informatics, ASAM Group\n        city: Fribourg\n        state: CH\ndate: 2023-11-11\ncategories: [openxlsx, openxlsx2]\nimage: image.jpg\ncitation: \n  url: https://rdiscovery.netlify.app/posts/2023-11-11_openxlsx2/\nformat:\n  html:\n    toc: true\n    toc-depth: 6\n    toc-title: Contents\n    toc-location: right\n    number-sections: false\n---\n\n\n*What are the main differences between [openxlsx](https://github.com/awalker89/openxlsx) and [openxlsx2](https://github.com/JanMarvin/openxlsx2)?*\n\n### Introduction\n\nWithin this blog post, my aim is to elucidate the primary distinctions between [openxlsx](https://github.com/awalker89/openxlsx) and [openxlsx2](https://github.com/JanMarvin/openxlsx2). I've encountered these variances through a [Github Gist](https://gist.github.com/JanMarvin/a0d89bb8e128899477654dd2d4f4402d), the informative vignette titled [\"Update from openxlsx\"](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html), and my personal hands-on experience.\n\nThe provided tables are designed to offer a clear overview of the differences between openxlsx and openxlsx2. They serve as a concise presentation, illustrating the content of the vignette titled \"Update from openxlsx,\" which can be explored in detail [here](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html).\n\n### Chaining versus Piping\n\nIn contrast to openxlsx, openxlsx2 enables the creation of workbooks, the addition of styles, data writing, and other operations through the use of chained or piped operations.\n\nIf you lean towards using pipes, please turn to the last column in the tables within the subsequent sections. This column specifies the corresponding function and its recommended usage with pipes. If the function is the same in both columns, it can be used with pipes or chains.\n\nIn the tables below, we've highlighted the key arguments for each function. For a deeper dive into the specifics of each function's arguments, check out the examples in the following sections.\n\nKindly explore [this specific vignette section](https://janmarvin.github.io/openxlsx2/articles/Update-from-openxlsx.html#styles) for an example that contrasts openxlsx and openxlsx2. Unlike openxlsx, which lacks integration with pipes or chains, openxlsx2 offers flexibility in its application.\n\nIn the upcoming examples, I'll use pipes, but feel free to use chains if you prefer.\n\nBuilding a workbook with pipes or chains, instead of relying on isolated functions, is already a significant improvement!\n\n### Read an existing Excel Workbook\n\n\n::: {.cell tbl-cap='Create a workbook and write data'}\n\n:::\n\n\nPlease note that while openxlsx2 can read `xlsx` or `xlsm` files, openxlsx can only read `xlsx` files.\n\n\n::: {.cell tbl-cap='Read an existing Excel workbook' tbl-colwidths='[50,60,60,60]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">openxlsx2</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> Action </th>\n   <th style=\"text-align:left;\"> openxlsx </th>\n   <th style=\"text-align:left;\"> chain </th>\n   <th style=\"text-align:left;\"> pipe </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Load file </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> `wb_load()` </td>\n   <td style=\"text-align:left;\"> `wb_load()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Read file </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> `wb_to_df()` </td>\n   <td style=\"text-align:left;\"> `wb_to_df()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Read file </td>\n   <td style=\"text-align:left;\"> `read.xlsx()` </td>\n   <td style=\"text-align:left;\"> `read_xlsx()` </td>\n   <td style=\"text-align:left;\"> `read_xlsx()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Read file </td>\n   <td style=\"text-align:left;\"> `readWorkbook()` </td>\n   <td style=\"text-align:left;\"> `wb_read()` </td>\n   <td style=\"text-align:left;\"> `wb_read()` </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nPlease be aware that the recently introduced functions in openxlsx2, namely `read_xlsx()` and `wb_read()`, serve as mere wrappers for `wb_to_df()`. Their purpose is to facilitate a seamless transition between openxlsx and openxlsx2.\n\n### Write a file (xlsx or xlsm)\n\n\n::: {.cell tbl-cap='Write an xlsx or xlsm workbook'}\n\n:::\n\n::: {.cell tbl-cap='Write an xlsx or xlsm workbook' tbl-colwidths='[50,60,60,60]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">openxlsx2</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> Action </th>\n   <th style=\"text-align:left;\"> openxlsx </th>\n   <th style=\"text-align:left;\"> chain </th>\n   <th style=\"text-align:left;\"> pipe </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Create temporary xlsm file </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> `temp_xlsx(macros = TRUE)` </td>\n   <td style=\"text-align:left;\"> `temp_xlsx(macros = TRUE)` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Create temporary xlsx file </td>\n   <td style=\"text-align:left;\"> `temp_xlsx()` </td>\n   <td style=\"text-align:left;\"> `temp_xlsx()` </td>\n   <td style=\"text-align:left;\"> `temp_xlsx()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Write file </td>\n   <td style=\"text-align:left;\"> `write.xlsx()` </td>\n   <td style=\"text-align:left;\"> `write_xlsx()` </td>\n   <td style=\"text-align:left;\"> `write_xlsx()` </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n### Create an Excel Workbook from Scratch\n\nLet's say you would like to create a workbook called `wb` and a worksheet called `ws` where you want to write data `x`. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell tbl-cap='Create a workbook and write data' tbl-colwidths='[50,60,60,60]'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n<tr>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"empty-cells: hide;border-bottom:hidden;\" colspan=\"1\"></th>\n<th style=\"border-bottom:hidden;padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"2\"><div style=\"border-bottom: 1px solid #ddd; padding-bottom: 5px; \">openxlsx2</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:left;\"> Action </th>\n   <th style=\"text-align:left;\"> openxlsx </th>\n   <th style=\"text-align:left;\"> chain </th>\n   <th style=\"text-align:left;\"> pipe </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Create workbook </td>\n   <td style=\"text-align:left;\"> `createWorkbook()` </td>\n   <td style=\"text-align:left;\"> `wb_workbook()` </td>\n   <td style=\"text-align:left;\"> `wb_workbook()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Add worksheet </td>\n   <td style=\"text-align:left;\"> `addWorksheet(wb, 'ws')` </td>\n   <td style=\"text-align:left;\"> `wb$add_worksheet('ws')` </td>\n   <td style=\"text-align:left;\"> `wb_add_worksheet('ws')` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Add data to worksheet </td>\n   <td style=\"text-align:left;\"> `writeData(wb, 'ws', x)` </td>\n   <td style=\"text-align:left;\"> `wb$add_data(x)` </td>\n   <td style=\"text-align:left;\"> `wb_add_data(x)` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Inspect workbook </td>\n   <td style=\"text-align:left;\"> `openXL(wb)` </td>\n   <td style=\"text-align:left;\"> `wb$open()` </td>\n   <td style=\"text-align:left;\"> `wb_open()` </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Save workbook </td>\n   <td style=\"text-align:left;\"> `saveWorkbook(wb, file) </td>\n   <td style=\"text-align:left;\"> `wb$save(file)` </td>\n   <td style=\"text-align:left;\"> `wb_save(file)` </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n#### Example\n\nIn this example, our aim is to explore various options for creating, saving, and importing an Excel workbook.\n\n##### Create a workbook with multiple sheets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx2)\nlibrary(palmerpenguins)\n\nwb <- wb_workbook(\n  creator = \"Layal Christine Lettry\",\n  title = \"My Test\",\n  subject = \"Create a Workbook\",\n  category = \"Test\",\n  datetime_created = Sys.time(),\n  theme = \"Office Theme\",\n  keywords = \"test\",\n  comments = \"This is my test\",\n  manager = \"Me\",\n  company = \"My Company\"\n) |>\n  wb_add_worksheet(\n    sheet = \"my_first_sheet\",\n    tab_color = \"blue\",\n    zoom = 150L,\n    visible = TRUE,\n    orientation = \"portrait\",\n    header = c(\"ODD HEAD LEFT\", \"ODD HEAD CENTER\", \"ODD HEAD RIGHT\"),\n    footer = c(\"ODD FOOT RIGHT\", \"ODD FOOT CENTER\", \"ODD FOOT RIGHT\"),\n    even_header = c(\"EVEN HEAD LEFT\", \"EVEN HEAD CENTER\", \"EVEN HEAD RIGHT\"),\n    even_footer = c(\"EVEN FOOT RIGHT\", \"EVEN FOOT CENTER\", \"EVEN FOOT RIGHT\"),\n    first_header = c(\"TOP\", \"OF FIRST\", \"PAGE\"),\n    first_footer = c(\"BOTTOM\", \"OF FIRST\", \"PAGE\")\n  ) |>\n  wb_add_data(\n    x = penguins,\n    start_col = 3,\n    start_row = 10,\n    array = FALSE,\n    col_names = TRUE,\n    row_names = FALSE,\n    with_filter = FALSE\n  ) |>\n  wb_add_worksheet(\n    sheet = \"my_second_sheet\",\n    tab_color = \"red\",\n    zoom = 75L,\n    visible = TRUE,\n    orientation = \"landscape\"\n  ) |>\n  wb_add_data(\n    x = penguins_raw,\n    dims = wb_dims(2, 1),\n    col_names = TRUE,\n    row_names = TRUE,\n    with_filter = TRUE\n  )\n```\n:::\n\n\n\n##### Inspect and write the workbook data\n\nYou can perform the following steps to examine the data and save it to a temporary xlsx file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Inspect the workbook\nwb |>\n  wb_open()\n\n# Create a new temporary file\nmyfile <- temp_xlsx()\n\n# Write the workbook into a temporary xlsx file\nwb |>\n  wb_save(file = myfile, overwrite = TRUE)\n\n# Open the xlsx file\nbrowseURL(myfile)\n```\n:::\n\n\nPlease be aware that in order to view the headers and footers, you should click on \"View\" and select \"Header and Footer\" (for Mac users). This option enables you to distinguish between the landscape and portrait orientations on the two sheets.\n\n##### Import workbook and start working on the data with dplyr\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import the data of your file into a data frame\nmy_df <- myfile |>\n  wb_to_df(\n    sheet = 1,\n    detect_dates = TRUE,\n    col_names = TRUE\n  )\n\n# Display the first few rows of the data frame\nmy_df |>\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   species    island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n11  Adelie Torgersen           39.1          18.7               181        3750\n12  Adelie Torgersen           39.5          17.4               186        3800\n13  Adelie Torgersen           40.3          18.0               195        3250\n14  Adelie Torgersen             NA            NA                NA          NA\n15  Adelie Torgersen           36.7          19.3               193        3450\n16  Adelie Torgersen           39.3          20.6               190        3650\n      sex year\n11   male 2007\n12 female 2007\n13 female 2007\n14   <NA> 2007\n15 female 2007\n16   male 2007\n```\n:::\n\n```{.r .cell-code}\n# Provide a summary of the data frame structure\nmy_df |>\n  dplyr::glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <chr> \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"Adelie\", \"A…\n$ island            <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", …\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <dbl> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <dbl> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <chr> \"male\", \"female\", \"female\", NA, \"female\", \"male\", \"f…\n$ year              <dbl> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n\n```{.r .cell-code}\n# Provide the class of the data frame\nclass(my_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\n# Convert it into a tibble\nmy_tib <- tibble::as_tibble(my_df)\nmy_tib\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}