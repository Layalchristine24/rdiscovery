---
title: Use rlang and glue syntax to create new variables
author:
  - name:
      given: Layal Christine
      family: Lettry
      orcid: 0009-0008-6396-0523
    affiliations:
      - id: cynkra
      - name: cynkra GmbH
        city: Zurich
        state: CH
      - id: unifr
      - name: University of Fribourg, Dept. of Informatics, ASAM Group
        city: Fribourg
        state: CH
date: 2024-03-29
categories: [rlang, glue, sym, englue, name injection, curly curly, dynamic dots, indirection]
image: image.jpg
citation: 
  url: https://rdiscovery.netlify.app/posts/2024-03-29_rlang-glue/
format:
  html:
    toc: true
    toc-depth: 6
    toc-title: Contents
    toc-location: right
    number-sections: false
editor_options: 
  chunk_output_type: console
---

*How can you create, transform and filter several variables in a function by using the glue syntax and rlang?*

The following example helps me to remind how to deal with the rlang and glue syntax. However, this is very complicated and this is intended to be a simple means of finding working ways of using the operators *curly-curly* (`{{ x }}`) and the *name injection* (`:=`) as well as the functions `englue` and `sym` in other use cases.

Please always try to find an easy way to solve your problem. If it is too complicated (like it is below), try to think again about how you can solve your problem in an easier way.

You may want to look at the article sections about [indirection](https://dplyr.tidyverse.org/articles/programming.html#indirection) and [name injection](https://dplyr.tidyverse.org/articles/programming.html#name-injection). Additionally, you will find further information in the vignette about [dynamic dots](https://rlang.r-lib.org/reference/dyn-dots.html).

```{r}
my_mean <- function(data,
                    input_var1,
                    output_var) {
  input_var1_name_torgersen <- rlang::englue("{{ input_var1 }}.Torgersen")
  input_var1_name_biscoe <- rlang::englue("{{ input_var1 }}.Biscoe")
  input_var1 <- rlang::englue("{{ input_var1 }}")
  output_name_torgersen <- rlang::englue("{{ output_var }}.Torgersen")
  output_name_biscoe <- rlang::englue("{{ output_var }}.Biscoe")

  res <- data |>
    dplyr::filter(island %in% c("Torgersen", "Biscoe")) |>
    tidyr::pivot_wider(
      names_from = c(species, island),
      names_sep = ".",
      values_from = body_mass_g
    ) |>
    dplyr::reframe(
      "{output_name_torgersen}" := mean(eval(rlang::sym({
        input_var1_name_torgersen
      })), na.rm = TRUE),
      "{output_name_biscoe}" := mean(eval(rlang::sym({
        input_var1_name_biscoe
      })), na.rm = TRUE),
      .by = c(year, sex)
    ) |>
    dplyr::distinct() |> 
    tidyr::drop_na()
}
out <- palmerpenguins::penguins |>
  dplyr::mutate(
    species = as.character(species),
    island = as.character(island)
  ) |>
  my_mean(
    input_var1 = Adelie,
    output_var = Adelie.mean_bodymass
  )
out
```

# Easy alternative solution

A simple way to obtain a much better result in a tidied data frame would be using `dplyr::across()`.

```{r}
palmerpenguins::penguins |>
  dplyr::reframe(dplyr::across(body_mass_g, \(x) mean(x, na.rm = TRUE), .names = "mean_{.col}"),
    .by = c(year, sex, island, species)
  ) |>
  dplyr::filter(
    island %in% c("Torgersen", "Biscoe"),
    species == "Adelie"
  ) |> 
  tidyr::drop_na(sex)
```
