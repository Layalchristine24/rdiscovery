{
  "hash": "4cc7bccfe4a28615f804ef01a2052af5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Use rlang and glue syntax to create new variables\nauthor:\n  - name:\n      given: Layal Christine\n      family: Lettry\n      orcid: 0009-0008-6396-0523\n    affiliations:\n      - id: cynkra\n      - name: cynkra GmbH\n        city: Zurich\n        state: CH\n      - id: unifr\n      - name: University of Fribourg, Dept. of Informatics, ASAM Group\n        city: Fribourg\n        state: CH\ndate: 2024-03-29\ncategories: [rlang, glue, sym, englue, name injection, curly curly]\nimage: image.jpg\ncitation: \n  url: https://rdiscovery.netlify.app/posts/2024-03-29_rlang-glue/\nformat:\n  html:\n    toc: true\n    toc-depth: 6\n    toc-title: Contents\n    toc-location: right\n    number-sections: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n*How can you create, transform and filter several variables in a function by using the glue syntax and rlang?*\n\nThe following example helps me to remind how to deal with the rlang and glue syntax. However, this is very complicated and this is intended to be a simple means of finding working ways of using the operators *curly-curly* (`{{ x }}`) and the *name injection* (`:=`) as well as the functions `englue` and `sym` in other use cases.\n\nPlease always try to find an easy way to solve your problem. If it is too complicated (like it is below), try to think again about how you can solve your problem in an easier way.\n\nYou may want to look at the article sections about [indirection](https://dplyr.tidyverse.org/articles/programming.html#indirection) and [name injection](https://dplyr.tidyverse.org/articles/programming.html#name-injection). Additionally, you will find further information in the vignette about [dynamic dots](https://rlang.r-lib.org/reference/dyn-dots.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_mean <- function(data,\n                    input_var1,\n                    output_var) {\n  input_var1_name_torgersen <- rlang::englue(\"{{ input_var1 }}.Torgersen\")\n  input_var1_name_biscoe <- rlang::englue(\"{{ input_var1 }}.Biscoe\")\n  input_var1 <- rlang::englue(\"{{ input_var1 }}\")\n  output_name_torgersen <- rlang::englue(\"{{ output_var }}.Torgersen\")\n  output_name_biscoe <- rlang::englue(\"{{ output_var }}.Biscoe\")\n\n  res <- data |>\n    dplyr::filter(island %in% c(\"Torgersen\", \"Biscoe\")) |>\n    tidyr::pivot_wider(\n      names_from = c(species, island),\n      names_sep = \".\",\n      values_from = body_mass_g\n    ) |>\n    dplyr::reframe(\n      \"{output_name_torgersen}\" := mean(eval(rlang::sym({\n        input_var1_name_torgersen\n      })), na.rm = TRUE),\n      \"{output_name_biscoe}\" := mean(eval(rlang::sym({\n        input_var1_name_biscoe\n      })), na.rm = TRUE),\n      .by = c(year, sex)\n    ) |>\n    dplyr::distinct() |> \n    tidyr::drop_na()\n}\nout <- palmerpenguins::penguins |>\n  dplyr::mutate(\n    species = as.character(species),\n    island = as.character(island)\n  ) |>\n  my_mean(\n    input_var1 = Adelie,\n    output_var = Adelie.mean_bodymass\n  )\nout\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n   year sex    Adelie.mean_bodymass.Torgersen Adelie.mean_bodymass.Biscoe\n  <int> <fct>                           <dbl>                       <dbl>\n1  2007 male                            4139.                       3770 \n2  2007 female                          3475                        3470 \n3  2008 female                          3519.                       3244.\n4  2008 male                            4194.                       4011.\n5  2009 female                          3194.                       3447.\n6  2009 male                            3784.                       4269.\n```\n\n\n:::\n:::\n\n\n# Easy alternative solution\n\nA simple way to obtain a much better result in a tidied data frame would be using `dplyr::across()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins |>\n  dplyr::reframe(dplyr::across(body_mass_g, \\(x) mean(x, na.rm = TRUE), .names = \"mean_{.col}\"),\n    .by = c(year, sex, island, species)\n  ) |>\n  dplyr::filter(\n    island %in% c(\"Torgersen\", \"Biscoe\"),\n    species == \"Adelie\"\n  ) |> \n  tidyr::drop_na(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 5\n    year sex    island    species mean_body_mass_g\n   <int> <fct>  <fct>     <fct>              <dbl>\n 1  2007 male   Torgersen Adelie             4139.\n 2  2007 female Torgersen Adelie             3475 \n 3  2007 female Biscoe    Adelie             3470 \n 4  2007 male   Biscoe    Adelie             3770 \n 5  2008 female Biscoe    Adelie             3244.\n 6  2008 male   Biscoe    Adelie             4011.\n 7  2008 female Torgersen Adelie             3519.\n 8  2008 male   Torgersen Adelie             4194.\n 9  2009 female Biscoe    Adelie             3447.\n10  2009 male   Biscoe    Adelie             4269.\n11  2009 female Torgersen Adelie             3194.\n12  2009 male   Torgersen Adelie             3784.\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}